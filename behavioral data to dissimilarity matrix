# rtfull_data is a folder that contains datasets that consist of finger responses and its reaction time, recorded throughout the trials, by row.
# There are five blocks with 210 trials in each.
# Variable "note" is the finger movement that subjects are asked to perform. i.e. 1000 is pressing with the little finger; 1100 for the little & ring finger; 1111 for all fingers except the thumb.
# I am interested in all pairwise reaction time when going from one movement to another. The rts are to be mapped on a dissimilarity matrix for furthur analysis.
# Functions for data manipulation are first defined. 
################################# Functions ####################################
#------------------------------------------------------------------------------#
# This function takes the previous row $note and $correct and put them on the  #
# current row. This is done for indexing pairwise relationships.               #
prev.info = function(x)
{
  for(i in 2:nrow(x)){
    x$prev_note[i]= x$note[i-1]
    x$prev_correct[i]= x$correct[i-1]
  }
  return(x)
}

#------------------------------------------------------------------------------#
# This function separates day 1 and 2. Create a new column for each csv,       #
# indicating the day, then output two lists of csv for the two days.           #
index.day = function(allfiles){
  day1_csvlist = lapply(allfiles[startsWith(allfiles, "day1")], read.csv)
  day1_csvlist = lapply(day1_csvlist, function(x) cbind(x, day = 1))
  day2_csvlist = lapply(allfiles[startsWith(allfiles, "day2")], read.csv)
  day2_csvlist = lapply(day2_csvlist, function(x) cbind(x, day = 2))
  day2_csvlist = lapply(day2_csvlist, function(x) dplyr::select(x, -value))     #day 2 has a $value col. Remove.
  dayx_csvlist = list(day1_csvlist,day2_csvlist)
  return(dayx_csvlist)
}

#------------------------------------------------------------------------------#
# This function takes in a list. assigns subj ID to day 1 and day 2.           #
index.subj = function(dayx_csvlist){
  dayx_csvlist[[1]] = Map(function(x, n) cbind(x, subj = n), dayx_csvlist[[1]], 
                          seq_along(dayx_csvlist[[1]]))
  dayx_csvlist[[2]] = Map(function(x, n) cbind(x, subj = n), dayx_csvlist[[2]], 
                          seq_along(dayx_csvlist[[2]]))
  return(dayx_csvlist)
}

#------------------------------------------------------------------------------#
# This function takes in csv of a subj. It retains useful rows, index the      #
# blocks, and calls for prev() function which deals with pairwise information  #
subj.reform = function(subj_raw){
  subj_block = list()
  prev_note = NA
  prev_correct = NA
  for(b in 1:5){
    endrow = which(subj_raw$stimulus == 
                     "<p>Great job, continue when ready!</p>")[-1][b]-1         #Square brackets [remove first element for block# vector][the nth block]<prev row>
    startrow = endrow-209
    subj_block[[b]] = subj_raw[startrow:endrow,]
    subj_block[[b]] = cbind(subj_block[[b]], prev_note, prev_correct)
    block_num = b
    subj_block[[b]] = cbind(subj_block[[b]],block_num)
    subj_block[[b]] = prev.info(subj_block[[b]])
  }
  subj_data = do.call(rbind, subj_block)
  return(subj_data)
}

#------------------------------------------------------------------------------#
# This function takes rt cell, converts to numeric and takes the mean.         #
string2mean = function(x) {
  mean(as.numeric(unlist(strsplit(
    gsub("\\[|\\]","",x), ","))),na.rm=T)
}

#------------------------------------------------------------------------------#
#                         Reform Rating                                        #
rating.reform = function(subj_raw){
  prev_note = NA
  rating = NA
  day1_endstring = "<p> Thank you participating in Part 1 of Learning Piano: the Science Edition! Confirm your completion below and see you soon for Part 2.<p>"
  day2_endstring = "<p> Thank you participating in Part 2 of Learning Piano: the Science Edition! Confirm your completion below, and you will be redirected to our debriefing page.<p>"
  if(subj_raw$day[1] == 1){
    subj_rating = subj_raw[1109:which(subj_raw$stimulus == day1_endstring)-1,]  #Retain the Rating section for day 1 or day 2
  }else if(subj_raw$day[1] == 2){
    subj_rating = subj_raw[1109:which(subj_raw$stimulus == day2_endstring)-1,]
  }
  subj_rating = subj_rating[subj_rating$correct != "false",]                    #Drop false rows and rows without info
  subj_rating = subj_rating[subj_rating$key_press != "[]",]
  subj_rating = cbind(subj_rating,prev_note)                                    #create new col for prev_note
  subj_rating = cbind(subj_rating,rating)
  for(r in 2:nrow(subj_rating)){                                                #assign previous note to prev_note
    subj_rating$prev_note[r] = subj_rating$note[r-1]
  }
  for(r in 3:nrow(subj_rating)){                                                #assign response to rating (on the same row)
    subj_rating$rating[r] = subj_rating$response[r+1]
  }
  subj_rating = subj_rating[seq(3, nrow(subj_rating), 3), ]                     #Keep every third row
  subj_rating$rating = as.numeric(gsub('[^[:digit:].]+', '', 
                                       subj_rating$rating))                     #convert string to number for rating
  return(subj_rating)
}

#------------------------------------------------------------------------------#
#             Create New Columns Based on Finger Num and Chord                 #
newcol.nfing = function(all_reformed_subj){
  all_reformed_subj = all_reformed_subj %>%
    mutate(note_finger_num = case_when(
      note %in% c("1", "10", "100", "1000") ~ "1",
      note %in% c("11", "110", "1100", "1010","101","1001") ~ "2",
      note %in% c("1110", "111", "1011", "1101") ~ "3",
      TRUE ~ NA_character_
    ))
  all_reformed_subj = all_reformed_subj %>%
    mutate(prev_note_finger_num = case_when(
      prev_note %in% c("1", "10", "100", "1000") ~ "1",
      prev_note %in% c("11", "110", "1100", "1010","101","1001") ~ "2",
      prev_note %in% c("1110", "111", "1011", "1101") ~ "3",
      TRUE ~ NA_character_
    ))
  return(all_reformed_subj)
}

newcol.chord = function(all_reformed_subj){
  all_reformed_subj = all_reformed_subj %>%
    mutate(note_chord = case_when(
      note %in% c("1000", "100", "1010", "101","11","1101","1110") ~ "C",
      note %in% c("10","1","1100","1001","110","111","1011") ~ "F#",
      TRUE ~ NA_character_
    ))
  all_reformed_subj = all_reformed_subj %>%
    mutate(prev_note_chord = case_when(
      prev_note %in% c("1000", "100", "1010", "101","11","1101","1110") ~ "C",
      prev_note %in% c("10","1","1100","1001","110","111","1011") ~ "F#",
      TRUE ~ NA_character_
    ))
  return(all_reformed_subj)
}

#----------------------------- Functions LOADED -------------------------------#

############################# Data Import ######################################
#------------------------------------------------------------------------------#
#                           Data Loading                                       #
setwd("rtfull_data")
allfiles = list.files()
dayx_csvlist = index.day(allfiles)
dayxsubjn_csvlist = index.subj(dayx_csvlist)

#------------------------------Import ENDS-------------------------------------#

############################ RT Data Manipulation ##############################
#------------------------------------------------------------------------------#
#      Combine the list of csv into one long form df.                          #
#      Also reformatting in the process.                                       #
all_reformed_subj = data.frame()                                                
for(x in seq_along(dayxsubjn_csvlist)){                                         #Loop through number of days based on the length of dayxsubjn_csvlist
  for(n in seq_along(dayxsubjn_csvlist[[x]])){                                  #Loop through number of subj based on the length of dayxsubjn_csvlist[[x]] (num of subj in day x)
    subj_raw = dayxsubjn_csvlist[[x]][[n]] 
    reformed_subj = subj.reform(subj_raw)
    all_reformed_subj = rbind(all_reformed_subj, reformed_subj)
  }
}

#------------------------------------------------------------------------------#
#      Create new column for mean_rt                                           #
all_reformed_subj = cbind(all_reformed_subj, rt_mean=NA)                              
all_reformed_subj$rt_mean<- apply(all_reformed_subj['rt'], 1, string2mean)      

#------------------------------------------------------------------------------#
#                     Create new col for finger num                            #
library(tidyverse)
all_reformed_subj = newcol.nfing(all_reformed_subj)
all_reformed_subj = newcol.chord(all_reformed_subj)

#-------------------------------Manipulation ENDS------------------------------#

############################# RT Data Exploration ##############################
#------------------------------------------------------------------------------#
#                       Check rt_mean NAs, mean, SE                            #
NAs = all_reformed_subj %>%
  group_by(note, prev_note, day) %>% 
  summarize(num_na = sum(is.na(rt_mean)))%>%
  arrange(desc(num_na))



summarise_rt_means = all_reformed_subj %>%
  filter(correct == "true", prev_correct == "true", day == 1)%>% 
  group_by(note, prev_note) %>% 
  summarize(std_error = sd(rt_mean, na.rm = TRUE) / sqrt(sum(!is.na(rt_mean))))

summarise_rt_means = all_reformed_subj %>%
  filter(correct == "true", prev_correct == "true", day == 1)%>% 
  group_by(note, prev_note) %>% 
  summarize(mean = mean(rt_mean))


pivot=all_reformed_subj %>% 
  filter(correct == "true", prev_correct == "true", day == 1) %>% 
  group_by(note, prev_note ) %>% 
  summarize(grandmean = mean(rt_mean)) %>% 
  pivot_wider(names_from = note, values_from = grandmean)

pivot=all_reformed_subj %>% 
  filter(correct == "true", prev_correct == "true", day == 1) %>% 
  group_by(note, prev_note ) %>% 
  summarize(std_error = sd(rt_mean, na.rm = TRUE) / sqrt(sum(!is.na(rt_mean)))) %>% 
  pivot_wider(names_from = note, values_from = std_error)

#---------------------------- Exploration ENDS --------------------------------#
