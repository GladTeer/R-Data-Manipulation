# behavioral.csv is a dataset that consists of finger responses and its reaction time, recorded throughout the trials, by row.
# There are five blocks with 210 trials in each.
# Variable "note" is the finger movement that subjects are asked to perform. i.e. 1000 is pressing with the little finger; 1100 for the little & ring finger; 1111 for all fingers except the thumb.
# I am interested in all pairwise reaction time when going from one movement to another. The rts will are to be mapped on a dissimilarity matrix for furthur analysis.
library(pracma)
library(plot.matrix)

# In this example, I am only calling for one subject. but the code works for multiple subjects with a csv file for each subject.
participant_n = 1                               #specifying subject number
setwd("insert the directory of the folder which contains behavioral1")
temp= list.files()             
day_1 = temp[startsWith(temp, "behavioral1")]
data = lapply(day_1, read.csv)


#1st block  
block = list()
for(k in 1:participant_n){
  block[[k]] = data[[k]][which(data[[k]]$trial_index==40):which(data[[k]]$trial_index==249),]
}

#get all correct responses. I am only interested in the rts of correct responses.
block_correct = list()
for(k in 1:participant_n){
  block_correct[[k]] = block[[k]][block[[k]]$correct == "TRUE",]
}

#fill in matrix
mat = matrix(NA, nrow =14, ncol=14)
colnames(mat)= c(100,11,1010,1000,1101,101,1110,111,1011,1100,1,1001,110,10)
rownames(mat) = colnames(mat)
matlist = list()
for(k in 1:participant_n){
  for(i in 1:14){
    for(j in 1:14){
      mat[i,j] = mean(unlist(lapply(lapply(strsplit(gsub("\\[|\\]","",block_correct[[k]]$rt[which(block_correct[[k]]$note == colnames(mat)[j])[block_correct[[k]]$note[which(block_correct[[k]]$note == colnames(mat)[j])-1]==colnames(mat)[i]]]
      ),","), as.numeric), mean)), na.rm=T)   #This line finds the rows for a specific note with correct input, within these rows, identify the ones with specific previous row with the correct input. Then turn the rt for those rows into numeric, then find their average (If there are multiple numbers).
    }
  }
}

#2nd block
block = list()
for(k in 1:participant_n){
  block[[k]] = data[[k]][which(data[[k]]$trial_index==251):which(data[[k]]$trial_index==461),]
}

#get all correct responses
block_correct = list()
for(k in 1:participant_n){
  block_correct[[k]] = block[[k]][block[[k]]$correct == "TRUE",]
}

#fill in matrix
mat2 = matrix(NA, nrow =14, ncol=14)
colnames(mat2)= c(100,11,1010,1000,1101,101,1110,111,1011,1100,1,1001,110,10)
rownames(mat2) = colnames(mat2)
mat2list = list()
for(k in 1:participant_n){
  for(i in 1:14){
    for(j in 1:14){
      mat2[i,j] = mean(unlist(lapply(lapply(strsplit(gsub("\\[|\\]","",block_correct[[k]]$rt[which(block_correct[[k]]$note == colnames(mat2)[j])[block_correct[[k]]$note[which(block_correct[[k]]$note == colnames(mat2)[j])-1]==colnames(mat2)[i]]]
      ),","), as.numeric), mean)), na.rm=T)   #This line finds the rows for a specific note with correct input, within these rows, identify the ones with specific previous row with the correct input. Then turn the rt for those rows into numeric, then find their average (If there are multiple numbers).
    }
  }
}

#3rd block
block = list()
for(k in 1:participant_n){
  block[[k]] = data[[k]][which(data[[k]]$trial_index==463):which(data[[k]]$trial_index==673),]
}

#get all correct responses
block_correct = list()
for(k in 1:participant_n){
  block_correct[[k]] = block[[k]][block[[k]]$correct == "TRUE",]
}

#fill in matrix
mat3 = matrix(NA, nrow =14, ncol=14)
colnames(mat3)= c(100,11,1010,1000,1101,101,1110,111,1011,1100,1,1001,110,10)
rownames(mat3) = colnames(mat3)
mat3list = list()
for(k in 1:participant_n){
  for(i in 1:14){
    for(j in 1:14){
      mat3[i,j] = mean(unlist(lapply(lapply(strsplit(gsub("\\[|\\]","",block_correct[[k]]$rt[which(block_correct[[k]]$note == colnames(mat3)[j])[block_correct[[k]]$note[which(block_correct[[k]]$note == colnames(mat3)[j])-1]==colnames(mat3)[i]]]
      ),","), as.numeric), mean)), na.rm=T)   #This line finds the rows for a specific note with correct input, within these rows, identify the ones with specific previous row with the correct input. Then turn the rt for those rows into numeric, then find their average (If there are multiple numbers).
    }
  }
}


#4th block
block = list()
for(k in 1:participant_n){
  block[[k]] = data[[k]][which(data[[k]]$trial_index==675):which(data[[k]]$trial_index==885),]
}

#get all correct responses
block_correct = list()
for(k in 1:participant_n){
  block_correct[[k]] = block[[k]][block[[k]]$correct == "TRUE",]
}

#fill in matrix
mat4 = matrix(NA, nrow =14, ncol=14)
colnames(mat4)= c(100,11,1010,1000,1101,101,1110,111,1011,1100,1,1001,110,10)
rownames(mat4) = colnames(mat4)
mat4list = list()
for(k in 1:participant_n){
  for(i in 1:14){
    for(j in 1:14){
      mat4[i,j] = mean(unlist(lapply(lapply(strsplit(gsub("\\[|\\]","",block_correct[[k]]$rt[which(block_correct[[k]]$note == colnames(mat4)[j])[block_correct[[k]]$note[which(block_correct[[k]]$note == colnames(mat4)[j])-1]==colnames(mat4)[i]]]
      ),","), as.numeric), mean)), na.rm=T)   #This line finds the rows for a specific note with correct input, within these rows, identify the ones with specific previous row with the correct input. Then turn the rt for those rows into numeric, then find their average (If there are multiple numbers).
    }
  }
}


#5th block
block = list()
for(k in 1:participant_n){
  block[[k]] = data[[k]][which(data[[k]]$trial_index==887):which(data[[k]]$trial_index==1097),]
}

#get all correct responses
block_correct = list()
for(k in 1:participant_n){
  block_correct[[k]] = block[[k]][block[[k]]$correct == "TRUE",]
}

#fill in matrix
mat5 = matrix(NA, nrow =14, ncol=14)
colnames(mat5)= c(100,11,1010,1000,1101,101,1110,111,1011,1100,1,1001,110,10)
rownames(mat5) = colnames(mat5)
mat5list = list()
for(k in 1:participant_n){
  for(i in 1:14){
    for(j in 1:14){
      mat5[i,j] = mean(unlist(lapply(lapply(strsplit(gsub("\\[|\\]","",block_correct[[k]]$rt[which(block_correct[[k]]$note == colnames(mat5)[j])[block_correct[[k]]$note[which(block_correct[[k]]$note == colnames(mat5)[j])-1]==colnames(mat5)[i]]]
      ),","), as.numeric), mean)), na.rm=T)   #This line finds the rows for a specific note with correct input, within these rows, identify the ones with specific previous row with the correct input. Then turn the rt for those rows into numeric, then find their average (If there are multiple numbers).
    }
  }
}

#Now that I have a matrix for every block, I can look for trend of rts over blocks. For now, I am interested in overall performance.
#Find average of all mats. 
allblocks_matlist<-list(mat,mat2,mat3,mat4,mat5)
Y <- do.call(cbind, allblocks_matlist)
Y <- array(Y, dim=c(dim(allblocks_matlist[[1]]), length(allblocks_matlist)))
mean_rt = apply(Y, c(1, 2), mean, na.rm = TRUE)
colnames(mean_rt)= c(100,11,1010,1000,1101,101,1110,111,1011,1100,1,1001,110,10)
rownames(mean_rt) = colnames(mean_rt)


#averaging upper and lower triangles. Then turn into array
averagedvector =  vector("list", participant_n)
for(n in 1:participant_n){
  for(i in 1:91){
    averagedvector[[n]][i]= mean(c(mean_rt[lower.tri(mean_rt)][i],t(mean_rt)[lower.tri(mean_rt)][i]))
  }
}

#Put the array in the lower tri, and copy the lower tri to upper tri to produce a symmetrical matrix
averagedmat = matrix(, nrow =14, ncol=14)
colnames(averagedmat)= c(100,11,1010,1000,1101,101,1110,111,1011,1100,1,1001,110,10)
rownames(averagedmat) = colnames(averagedmat)
averagedreducedlist = vector("list", participant_n)
for(n in 1:participant_n){
  averagedmat[lower.tri(averagedmat)] = averagedvector[[n]]
  averagedmat = t(averagedmat)
  averagedmat[lower.tri(averagedmat)] = averagedvector[[n]]
  diag(averagedmat) = 0
  averagedreducedlist[[n]]=averagedmat
}
res = plot(averagedreducedlist[[1]],digit = 2 ,text.cell=list(pos=3, cex=0.75), col = heat.colors(7),breaks = c(200, 1000), key=NULL, axis.col = 3, cex.axis = .7)







